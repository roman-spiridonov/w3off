name: 'Release and Upload Python Package to PyPi'
permissions:
  id-token: write
on:
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"
      - "[0-9]+.[0-9]+.[0-9]+a[0-9]+"
      - "[0-9]+.[0-9]+.[0-9]+b[0-9]+"
      - "[0-9]+.[0-9]+.[0-9]+rc[0-9]+"

env:
  PACKAGE_NAME: "w3off"
  OWNER: "Romman Spiridonov"
  URL: "https://pypi.org/p/w3off"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.CHECKOUT || '' }}
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Build release distributions
        run: |
          python -m pip install build
          python -m build

      - name: Upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: w3off
          path: dist/


  pypi-publish:
    if: startsWith(github.ref, 'refs/tags/')  # only publish to PyPI on tag pushes 
    runs-on: ubuntu-latest
    needs:
      - build
    permissions:
      id-token: write

    # Dedicated environments with protections for publishing are strongly recommended.
    # For more information, see: https://docs.github.com/en/actions/deploymengitt/targeting-different-environments/using-environments-for-deployment#deployment-protection-rules
    environment:
      name: release
      url: https://pypi.org/project/w3off/${{ github.ref_name }}

    steps:
      - name: Retrieve release distributions
        uses: actions/download-artifact@v4
        with:
          name: w3off
          path: dist/

      - name: Publish release distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

  github_release:
    name: Create GitHub Release
    needs: [build, pypi-publish]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.CHECKOUT || '' }}
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: w3off
          path: dist/

      - name: Sign the dists with Sigstore
        uses: sigstore/gh-action-sigstore-python@v3.0.0
        with:
          inputs: >-
            ./dist/*.tar.gz
            ./dist/*.whl

      # - name: Check Release Exists
      #   id: check-release-exists
      #   uses: f2calv/gha-check-release-exists@main
      #   with:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     ReleaseName: ${{ github.ref_name }} # Specify your release name here

      - name: Create GitHub Release
        # if: steps.check-release-exists.outputs.ReleaseExists == 'false'
        id: create_release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release create ${{ github.ref_name }} dist/* --title w3off-${{ github.ref_name }} --generate-notes
        # uses: softprops/action-gh-release@v2
        # if: startsWith(github.ref, 'refs/tags/')  # only release on tag pushes 
        # with:
        #   token: ${{ secrets.CHECKOUT || '' }}
        #   files: dist/*
        #   name: "w3off-${{ github.ref_name }}"     

      # - name: Upload artifact signatures to GitHub Release
      #   env:
      #     GITHUB_TOKEN: ${{ github.token }}
      #   # Upload to GitHub Release using the `gh` CLI.
      #   # `dist/` contains the built packages, and the
      #   # sigstore-produced signatures and certificates.
      #   run: >-
      #     gh release upload
      #     "$GITHUB_REF_NAME" dist/**
      #     --repo "$GITHUB_REPOSITORY"
